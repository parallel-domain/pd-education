#!/usr/bin/env python

"""
Convert juptyer notebooks to html, markdown, or pdf during git commits

1. convert them to the format(s) specified in nbgitconvert.ini placing them in a
   rendered/{output_format}/ directory
    - HTML files will get post-processing to remove rerun visualizer data and store separately
2. commit those newly converted files
"""
import argparse
import configparser
import os
import re
import subprocess

convert_dict = {
    'markdown': {'ext': 'md', 'default': 'no'},
    'html': {'ext': 'html', 'default': 'yes'},
    'pdf': {'ext': 'pdf', 'default': 'no'}
}
CONFIG_LOCATION = 'nbgitconvert.ini'


def create_config():
    """create config file with default output type setting written to {CONFIG_LOCATION}"""
    if os.path.exists(CONFIG_LOCATION):
        return  # if the config already exists, don't overwrite it

    lines = ["[output_types]"]
    for output_type, d in convert_dict.items():
        lines.append('{} = {}'.format(output_type, d['default']))
    lines.append("")
    lines.append("[output_dir]")
    lines.append("path = rendered/{output_type}")

    with open(CONFIG_LOCATION, "w") as f:
        f.write('\n'.join(lines))


def system(*args, **kwargs):
    """Run system command."""
    kwargs.setdefault('stdout', subprocess.PIPE)
    proc = subprocess.Popen(args, **kwargs)
    out, err = proc.communicate()
    return out.decode("utf-8")


def system_with_exitcode(*args, **kwargs):
    """Run system command and return an exit code."""
    kwargs.setdefault('stdout', subprocess.PIPE)
    proc = subprocess.Popen(args, **kwargs)
    out, err = proc.communicate()
    return proc.returncode


def get_changed_files():
    """Get python files from 'files to commit' git cache list."""
    files = []
    filelist = system('git', 'diff', '--cached', '--name-status').strip()
    for line in filelist.split('\n'):
        if line == '':
            continue
        try:
            action, filename = line.strip().split('\t')
            print(filename)
            if filename.endswith('.ipynb') and action != 'D':
                files.append(filename)
        except Exception:
            raise
    return files


def purge_head_and_extract_data_rrd(html_content, data_dir):
    # Use regex to remove the content within the <head> tag
    content = re.sub('(?<=<head>).*?(?=</head>)', '', html_content, flags=re.DOTALL)

    # Use regex to extract divs with data-rrd attribute and replace the attribute value with a running number
    pattern = re.compile(
        r'<div[^>]*data-rrd="([^"]*)"[^>]*>.*?</div>', re.DOTALL)
    matches = pattern.findall(content)
    for i, match in enumerate(matches, start=1):
        content = content.replace(f'data-rrd="{match}"', f'data-rrd="{i}"', 1)
        with open(f'{data_dir}/{i}.txt', 'w') as f:
            f.write(match)

    # Return the modified content
    return content


def treat_html_file(path):
    # Read the HTML file
    with open(path) as f:
        html_content = f.read()

    file_dir = os.path.dirname(path)
    data_dir = f'{file_dir}/data'
    if not os.path.exists(data_dir):
        os.makedirs(data_dir)

    modified_html = purge_head_and_extract_data_rrd(html_content, data_dir)

    # Write out modified content
    new_file = f'{file_dir}/index.html'
    with open(new_file, 'w') as f:
        f.write(modified_html)

    # Remove original HTML file
    os.remove(path)

    print(f'Successfully wrote modified HTML to {os.path.realpath(new_file)} and data to the "data" directory.')


def convert(file, output_type, output_dir):
    """run nbconvert to {output_type} on list of {files}"""
    root_dir = os.getcwd()
    file_path = os.path.realpath(file)
    file_dir = os.path.dirname(file_path)
    file_name = os.path.basename(file).split('.')[0]
    os.chdir(file_dir)
    output_dir = f'{file_dir}/{output_dir}'
    if output_type == 'html':
        output_dir += f'/{file_name}'
    args = ['jupyter', 'nbconvert', '--to']
    args.append(output_type)
    args.append(file_path)
    args.append('--output-dir=%s' % output_dir)
    print(' '.join(args))
    exitcode = system_with_exitcode(*args)
    if output_type == 'html':
        treat_html_file(f"{output_dir}/{file_name}.html")
    os.chdir(root_dir)
    if exitcode == 0:
        return file
    else:
        return None


def gitadd(file, output_type, output_dir):
    """git add all newly (re)rendered notebook files"""
    file_dir = os.path.dirname(os.path.realpath(file))
    file_name = os.path.basename(file).split('.')[0]
    output_dir = f'{file_dir}/{output_dir}'
    output_dir += f'/{file_name}*' if output_type == 'html' else '*'
    exitcode = system_with_exitcode('git', 'add', output_dir)
    if exitcode != 0:
        raise Exception('git add failed for %s' % output_dir)


def process(files, output_type, output_dir):
    """convert notebooks files to {output_type} and git add the rendered notebook files"""
    output_dir_ext = output_dir.format(output_type=output_type)
    for file in files:
        convert_result = convert(file, output_type, output_dir_ext)
        if convert_result is not None:
            gitadd(convert_result, output_type, output_dir_ext)


def main(args):

    if args['all']:
        files = filter(
            lambda x: x.endswith('.ipynb'),
            [f for f in os.listdir('.') if os.path.isfile(f)]
        )
    else:
        print(args['positional'])
        files = [f for f in args['positional'] if f.endswith('.ipynb')]  # get_changed_files()

    if len(files) == 0:
        return

    if args['pdf']:
        process(files, 'pdf', args['output_dir'])
    if args['markdown']:
        process(files, 'markdown', args['output_dir'])
    if args['html']:
        process(files, 'html', args['output_dir'])


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description="Process Config Location")
    parser.add_argument('positional', nargs="*", type=str)
    parser.add_argument('--all', action='store_true')
    try:
        config = configparser.ConfigParser()
        config.read(CONFIG_LOCATION)
        args = vars(parser.parse_args())
        for option in config.options('output_types'):
            args[option] = config.getboolean('output_types', option)
        args['output_dir'] = config.get('output_dir', 'path')
    except configparser.NoSectionError:
        pass
    except Exception as e:
        print(e)
        parser.add_argument('--html', action='store_true')
        parser.add_argument('--markdown', action='store_true')
        parser.add_argument('--pdf', action='store_true')
        args = vars(parser.parse_args())
    main(args)
